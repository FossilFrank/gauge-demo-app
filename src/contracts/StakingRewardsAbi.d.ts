/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type IncentiveIdInput = { value: BigNumberish };

export type IncentiveIdOutput = { value: BN };

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type DepositInput = { amount: BigNumberish; staked_pools: BigNumberish };

export type DepositOutput = { amount: BN; staked_pools: BN };

export type U128Input = { upper: BigNumberish; lower: BigNumberish };

export type U128Output = { upper: BN; lower: BN };

export type IncentiveInput = {
  owner: IdentityInput;
  staking_token: ContractIdInput;
  reward_token: ContractIdInput;
  period_finish: BigNumberish;
  reward_rate_scaled: U128Input;
  last_update_time: BigNumberish;
  reward_per_token_scaled_stored: U128Input;
  total_staked: BigNumberish;
  subsequent_period_finish: BigNumberish;
  subsequent_period_reward_rate_scaled: U128Input;
  subsequent_period_reward_amount: BigNumberish;
};

export type IncentiveOutput = {
  owner: IdentityOutput;
  staking_token: ContractIdOutput;
  reward_token: ContractIdOutput;
  period_finish: BN;
  reward_rate_scaled: U128Output;
  last_update_time: BN;
  reward_per_token_scaled_stored: U128Output;
  total_staked: BN;
  subsequent_period_finish: BN;
  subsequent_period_reward_rate_scaled: U128Output;
  subsequent_period_reward_amount: BN;
};

export type UserStakeInput = {
  amount_staked: BigNumberish;
  reward_per_token_scaled_paid: U128Input;
  earned_unclaimed_rewards: BigNumberish;
};

export type UserStakeOutput = {
  amount_staked: BN;
  reward_per_token_scaled_paid: U128Output;
  earned_unclaimed_rewards: BN;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface StakingRewardsAbiInterface extends Interface {
  functions: {
    cancel_incentive_extension: FunctionFragment;
    change_owner: FunctionFragment;
    create_incentive: FunctionFragment;
    extend_incentive: FunctionFragment;
    claim_reward: FunctionFragment;
    deposit: FunctionFragment;
    stake: FunctionFragment;
    unstake: FunctionFragment;
    withdraw: FunctionFragment;
    deposited_balance: FunctionFragment;
    earned: FunctionFragment;
    get_incentive: FunctionFragment;
    get_user_stake: FunctionFragment;
    reward_per_token: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancel_incentive_extension",
    values: [IncentiveIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "change_owner",
    values: [IncentiveIdInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_incentive",
    values: [ContractIdInput, BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "extend_incentive",
    values: [IncentiveIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "claim_reward",
    values: [IncentiveIdInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposit",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "stake",
    values: [IncentiveIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [IncentiveIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "deposited_balance",
    values: [ContractIdInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "earned",
    values: [IncentiveIdInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_incentive",
    values: [IncentiveIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_user_stake",
    values: [IncentiveIdInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "reward_per_token",
    values: [IncentiveIdInput]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "cancel_incentive_extension",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "change_owner",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_incentive",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "extend_incentive",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "claim_reward",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposit",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "stake", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "unstake",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "withdraw",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "deposited_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "earned", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_incentive",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_user_stake",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "reward_per_token",
    data: BytesLike
  ): DecodedValue;
}

export class StakingRewardsAbi extends Contract {
  interface: StakingRewardsAbiInterface;
  functions: {
    cancel_incentive_extension: InvokeFunction<
      [incentive_id: IncentiveIdInput],
      BN
    >;

    change_owner: InvokeFunction<
      [incentive_id: IncentiveIdInput, new_owner: IdentityInput],
      void
    >;

    create_incentive: InvokeFunction<
      [
        staking_token: ContractIdInput,
        start_time: BigNumberish,
        duration: BigNumberish
      ],
      IncentiveIdOutput
    >;

    extend_incentive: InvokeFunction<
      [incentive_id: IncentiveIdInput, duration: BigNumberish],
      void
    >;

    claim_reward: InvokeFunction<
      [incentive_id: IncentiveIdInput, recipient: IdentityInput],
      BN
    >;

    deposit: InvokeFunction<[], void>;

    stake: InvokeFunction<[incentive_id: IncentiveIdInput], void>;

    unstake: InvokeFunction<[incentive_id: IncentiveIdInput], void>;

    withdraw: InvokeFunction<
      [asset: ContractIdInput, amount: BigNumberish],
      void
    >;

    deposited_balance: InvokeFunction<
      [asset: ContractIdInput, account: IdentityInput],
      DepositOutput
    >;

    earned: InvokeFunction<
      [incentive_id: IncentiveIdInput, account: IdentityInput],
      BN
    >;

    get_incentive: InvokeFunction<
      [incentive_id: IncentiveIdInput],
      IncentiveOutput
    >;

    get_user_stake: InvokeFunction<
      [incentive_id: IncentiveIdInput, account: IdentityInput],
      UserStakeOutput
    >;

    reward_per_token: InvokeFunction<
      [incentive_id: IncentiveIdInput],
      U128Output
    >;
  };
}
