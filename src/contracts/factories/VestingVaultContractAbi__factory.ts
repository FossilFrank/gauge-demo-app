/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  VestingVaultContractAbi,
  VestingVaultContractAbiInterface,
} from "../VestingVaultContractAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "enum Error",
      components: [
        {
          name: "AlreadyInitalized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidInput",
          type: 0,
          typeArguments: null,
        },
        {
          name: "OnlyCallableByAdmin",
          type: 0,
          typeArguments: null,
        },
        {
          name: "VaultAlreadyCreated",
          type: 0,
          typeArguments: null,
        },
        {
          name: "CantBeZero",
          type: 0,
          typeArguments: null,
        },
        {
          name: "VaultNotFound",
          type: 0,
          typeArguments: null,
        },
        {
          name: "AlreadyClaimed",
          type: 0,
          typeArguments: null,
        },
        {
          name: "DidntSendToken",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 4,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 6,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "struct Claimed",
      components: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "beneficiary",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
        {
          name: "claim_amount",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "struct VestingVault",
      components: [
        {
          name: "end_time",
          type: 9,
          typeArguments: null,
        },
        {
          name: "start_time",
          type: 9,
          typeArguments: null,
        },
        {
          name: "last_updated",
          type: 9,
          typeArguments: null,
        },
        {
          name: "final_amount",
          type: 9,
          typeArguments: null,
        },
        {
          name: "amount_left_to_withdraw",
          type: 9,
          typeArguments: null,
        },
        {
          name: "claimable_per_last_update",
          type: 9,
          typeArguments: null,
        },
        {
          name: "ratio_amount_unvested_to_time_left",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "struct VestingVaultEvent",
      components: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
        {
          name: "end_time",
          type: 9,
          typeArguments: null,
        },
        {
          name: "start_time",
          type: 9,
          typeArguments: null,
        },
        {
          name: "final_amount",
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: "admin",
      output: {
        name: "",
        type: 3,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "beneficiary",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "claim",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "claimable",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "claimed_tokens",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
        {
          name: "start_time",
          type: 9,
          typeArguments: null,
        },
        {
          name: "end_time",
          type: 9,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "create_vault",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [],
      name: "helper_now_timestamp",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "increase_vest_size",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "rugpull",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "unvested_tokens",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "vault",
      output: {
        name: "",
        type: 7,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "recipient",
          type: 3,
          typeArguments: null,
        },
        {
          name: "token_id",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "vested_tokens",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 14,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 15,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 16,
      loggedType: {
        name: "",
        type: 8,
        typeArguments: [],
      },
    },
    {
      logId: 17,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 18,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 19,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class VestingVaultContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): VestingVaultContractAbiInterface {
    return new Interface(_abi) as unknown as VestingVaultContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): VestingVaultContractAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as VestingVaultContractAbi;
  }
}
