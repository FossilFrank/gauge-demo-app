/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  IncentiveVaultContractAbi,
  IncentiveVaultContractAbiInterface,
} from "../IncentiveVaultContractAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "enum Identity",
      components: [
        {
          name: "Address",
          type: 6,
          typeArguments: null,
        },
        {
          name: "ContractId",
          type: 7,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum IncentiveVaultErrors",
      components: [
        {
          name: "AlreadyInitialized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "AssetAlreadyAdded",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InvalidPool",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotAuthorized",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NoEpochsCompleted",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NoVotes",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotInitialized",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "enum Option",
      components: [
        {
          name: "None",
          type: 0,
          typeArguments: null,
        },
        {
          name: "Some",
          type: 5,
          typeArguments: null,
        },
      ],
      typeParameters: [5],
    },
    {
      typeId: 5,
      type: "generic T",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "struct IncentiveId",
      components: [
        {
          name: "value",
          type: 12,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "struct NewAssetEvent",
      components: [
        {
          name: "asset",
          type: 7,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 12,
          typeArguments: null,
        },
        {
          name: "epochs",
          type: 12,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "struct RewardAsset",
      components: [
        {
          name: "num_epochs",
          type: 12,
          typeArguments: null,
        },
        {
          name: "tokens_per_unit",
          type: 12,
          typeArguments: null,
        },
        {
          name: "start_epoch",
          type: 12,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: "struct RewardsDistributedEvent",
      components: [
        {
          name: "epoch",
          type: 12,
          typeArguments: null,
        },
        {
          name: "asset",
          type: 7,
          typeArguments: null,
        },
        {
          name: "incentive_id",
          type: 8,
          typeArguments: null,
        },
        {
          name: "amount",
          type: 12,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "num_epochs",
          type: 12,
          typeArguments: null,
        },
      ],
      name: "add_reward_asset",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "payable",
          arguments: [],
        },
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "pool",
          type: 7,
          typeArguments: null,
        },
        {
          name: "reward_asset",
          type: 7,
          typeArguments: null,
        },
      ],
      name: "create_staking_pool",
      output: {
        name: "",
        type: 8,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "incentive_id",
          type: 8,
          typeArguments: null,
        },
      ],
      name: "distribute_incentives_to_pool",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "gauges",
          type: 7,
          typeArguments: null,
        },
        {
          name: "registry",
          type: 7,
          typeArguments: null,
        },
        {
          name: "staking_rewards",
          type: 7,
          typeArguments: null,
        },
        {
          name: "epoch_duration",
          type: 12,
          typeArguments: null,
        },
      ],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset",
          type: 7,
          typeArguments: null,
        },
      ],
      name: "get_asset",
      output: {
        name: "",
        type: 4,
        typeArguments: [
          {
            name: "",
            type: 10,
            typeArguments: null,
          },
        ],
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "incentive_id",
          type: 8,
          typeArguments: null,
        },
        {
          name: "epoch",
          type: 12,
          typeArguments: null,
        },
      ],
      name: "get_pool_rewards_for_epoch",
      output: {
        name: "",
        type: 12,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset",
          type: 7,
          typeArguments: null,
        },
        {
          name: "epoch",
          type: 12,
          typeArguments: null,
        },
      ],
      name: "get_total_rewards_for_epoch",
      output: {
        name: "",
        type: 12,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "owner",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 9,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 11,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 11,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class IncentiveVaultContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): IncentiveVaultContractAbiInterface {
    return new Interface(_abi) as unknown as IncentiveVaultContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): IncentiveVaultContractAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as IncentiveVaultContractAbi;
  }
}
