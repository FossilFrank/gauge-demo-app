/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  ConsolidatorAbi,
  ConsolidatorAbiInterface,
} from "../ConsolidatorAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "enum ConsolidatorError",
      components: [
        {
          name: "InsufficentAmount",
          type: 0,
          typeArguments: null,
        },
        {
          name: "InsufficentReserves",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "u64",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: "consolidate",
      output: {
        name: "",
        type: 4,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
        {
          name: "payable",
          arguments: [],
        },
      ],
    },
    {
      inputs: [],
      name: "registry",
      output: {
        name: "",
        type: 3,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 2,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class ConsolidatorAbi__factory {
  static readonly abi = _abi;
  static createInterface(): ConsolidatorAbiInterface {
    return new Interface(_abi) as unknown as ConsolidatorAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): ConsolidatorAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as ConsolidatorAbi;
  }
}
