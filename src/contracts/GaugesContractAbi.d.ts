/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type RawVecInput = { ptr: any; cap: BigNumberish };

export type RawVecOutput = { ptr: any; cap: BN };

export type VecInput = { buf: RawVecInput; len: BigNumberish };

export type VecOutput = { buf: RawVecOutput; len: BN };

export type GaugeInput = { last_updated_epoch: BigNumberish };

export type GaugeOutput = { last_updated_epoch: BN };

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type OptionalGaugeInput = Option<GaugeInput>;

export type OptionalGaugeOutput = Option<GaugeOutput>;

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface GaugesContractAbiInterface extends Interface {
  functions: {
    create_gauge: FunctionFragment;
    initialize: FunctionFragment;
    vote: FunctionFragment;
    get_current_epoch: FunctionFragment;
    get_epoch_start_time: FunctionFragment;
    get_gauge_info: FunctionFragment;
    get_total_votes: FunctionFragment;
    get_user_votes_for_gauge: FunctionFragment;
    get_votes_for_gauge: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create_gauge",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [ContractIdInput, BigNumberish, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "vote", values: [VecInput]): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_current_epoch",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_epoch_start_time",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_gauge_info",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_total_votes",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_user_votes_for_gauge",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_votes_for_gauge",
    values: [BigNumberish, ContractIdInput]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "create_gauge",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "vote", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_current_epoch",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_epoch_start_time",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_gauge_info",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_total_votes",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_user_votes_for_gauge",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_votes_for_gauge",
    data: BytesLike
  ): DecodedValue;
}

export class GaugesContractAbi extends Contract {
  interface: GaugesContractAbiInterface;
  functions: {
    create_gauge: InvokeFunction<[pool: ContractIdInput], void>;

    initialize: InvokeFunction<
      [
        lock_up_contract: ContractIdInput,
        start_time: BigNumberish,
        epoch_length: BigNumberish
      ],
      void
    >;

    vote: InvokeFunction<[votes: VecInput], void>;

    get_current_epoch: InvokeFunction<[], BN>;

    get_epoch_start_time: InvokeFunction<[epoch: BigNumberish], BN>;

    get_gauge_info: InvokeFunction<
      [gauge_id: ContractIdInput],
      OptionalGaugeOutput
    >;

    get_total_votes: InvokeFunction<[epoch: BigNumberish], BN>;

    get_user_votes_for_gauge: InvokeFunction<
      [user: IdentityInput, gauge: ContractIdInput],
      BN
    >;

    get_votes_for_gauge: InvokeFunction<
      [epoch: BigNumberish, gauge: ContractIdInput],
      BN
    >;
  };
}
