/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

import type { Enum, Option } from "./common";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type VestingVaultInput = {
  end_time: BigNumberish;
  start_time: BigNumberish;
  last_updated: BigNumberish;
  final_amount: BigNumberish;
  amount_left_to_withdraw: BigNumberish;
  claimable_per_last_update: BigNumberish;
  ratio_amount_unvested_to_time_left: BigNumberish;
};

export type VestingVaultOutput = {
  end_time: BN;
  start_time: BN;
  last_updated: BN;
  final_amount: BN;
  amount_left_to_withdraw: BN;
  claimable_per_last_update: BN;
  ratio_amount_unvested_to_time_left: BN;
};

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface VestingVaultContractAbiInterface extends Interface {
  functions: {
    admin: FunctionFragment;
    claim: FunctionFragment;
    claimable: FunctionFragment;
    claimed_tokens: FunctionFragment;
    create_vault: FunctionFragment;
    helper_now_timestamp: FunctionFragment;
    increase_vest_size: FunctionFragment;
    initialize: FunctionFragment;
    rugpull: FunctionFragment;
    unvested_tokens: FunctionFragment;
    vault: FunctionFragment;
    vested_tokens: FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "claim",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "claimed_tokens",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "create_vault",
    values: [
      IdentityInput,
      ContractIdInput,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "helper_now_timestamp",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "increase_vest_size",
    values: [IdentityInput, ContractIdInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "rugpull",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "unvested_tokens",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "vault",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "vested_tokens",
    values: [IdentityInput, ContractIdInput]
  ): Uint8Array;

  decodeFunctionData(functionFragment: "admin", data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: "claim", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "claimable",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "claimed_tokens",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "create_vault",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "helper_now_timestamp",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "increase_vest_size",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "rugpull",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "unvested_tokens",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "vault", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "vested_tokens",
    data: BytesLike
  ): DecodedValue;
}

export class VestingVaultContractAbi extends Contract {
  interface: VestingVaultContractAbiInterface;
  functions: {
    admin: InvokeFunction<[], IdentityOutput>;

    claim: InvokeFunction<
      [beneficiary: IdentityInput, token_id: ContractIdInput],
      void
    >;

    claimable: InvokeFunction<
      [recipient: IdentityInput, token_id: ContractIdInput],
      BN
    >;

    claimed_tokens: InvokeFunction<
      [recipient: IdentityInput, token_id: ContractIdInput],
      BN
    >;

    create_vault: InvokeFunction<
      [
        recipient: IdentityInput,
        token_id: ContractIdInput,
        start_time: BigNumberish,
        end_time: BigNumberish,
        amount: BigNumberish
      ],
      void
    >;

    helper_now_timestamp: InvokeFunction<[], BN>;

    increase_vest_size: InvokeFunction<
      [
        recipient: IdentityInput,
        token_id: ContractIdInput,
        amount: BigNumberish
      ],
      void
    >;

    initialize: InvokeFunction<[], void>;

    rugpull: InvokeFunction<
      [recipient: IdentityInput, token_id: ContractIdInput],
      void
    >;

    unvested_tokens: InvokeFunction<
      [recipient: IdentityInput, token_id: ContractIdInput],
      BN
    >;

    vault: InvokeFunction<
      [recipient: IdentityInput, token_id: ContractIdInput],
      VestingVaultOutput
    >;

    vested_tokens: InvokeFunction<
      [recipient: IdentityInput, token_id: ContractIdInput],
      BN
    >;
  };
}
